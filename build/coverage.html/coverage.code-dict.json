{"/home/travis/build/npmtest/node-npmtest-netbeast/test.js":"/* istanbul instrument in package npmtest_netbeast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast/lib.npmtest_netbeast.js":"/* istanbul instrument in package npmtest_netbeast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_netbeast = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_netbeast = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-netbeast && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_netbeast */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_netbeast\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_netbeast.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_netbeast.rollup.js'] =\n            local.assetsDict['/assets.npmtest_netbeast.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_netbeast.__dirname + '/lib.npmtest_netbeast.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/index.js":"var Promise = require('bluebird')\nvar request = require('superagent-bluebird-promise')\nvar chalk = require('chalk')\nvar mqtt = require('mqtt')\n\nvar scan = require('./lib/scan')\n\nvar NETBEAST = require('./lib/init')() // load env variables if needed or crash program\nconst HTTP_API = 'http://' + NETBEAST + '/api/resources'\nconst HTTP_SCENES = 'http://' + NETBEAST + '/api/scenes'\nconst APP_PROXY = 'http://' + NETBEAST + '/i/'\n\nfunction netbeast (topic) {\n  var self = {}\n  self.props = {}\n  self.props.topic = topic\n  self.props.location = null\n  self.props.alias = null\n  self.props.group = null\n  // definiciones\n\n  // Add a device to a given scene\n  self.addDeviceScene = function (deviceid) {\n    return request.get(HTTP_API).query({ id: deviceid })\n    .then(function (res) {\n      if (!res.body.length) return Promise.reject('These resources doesn´t exists!')\n      return request.get(APP_PROXY + res.body[0].app + res.body[0].hook)\n      .then(function (res) {\n        //  Registra dispositivo en la escena\n        var device = {\n          id: deviceid,\n          sceneid: self.props.topic,\n          location: self.props.location,\n          state: JSON.stringify(res.body)\n        }\n        return request.post(HTTP_SCENES).send(device).promise()\n      })\n    })\n  }\n\n  //  Specified the alias of the objects\n  self.alias = function (alias) {\n    self.props.alias = alias\n    return self\n  }\n\n  // Apply the values saved on a Scene\n  self.applyScene = function () {\n    if (!self.props.topic) return Promise.reject('There isn´t any scene selected')\n    return self.getScene()\n    .then(function (res) {\n      res.body.forEach(function (device) {\n        return self.setById(device.id, JSON.parse(device.state))\n      })\n    })\n  }\n\n  //  Specified the location of the objects\n  self.at = function (location) {\n    self.props.location = location\n    return self\n  }\n\n  self.changeAlias = function (alias) {\n    if (!alias) return Promise.reject(new Error('Alias required --> netbeast(<id>).changeAlias(<alias>)'))\n    if (!self.props.topic) return Promise.reject(new Error('Id required --> netbeast(<id>).changeAlias(<alias>)'))\n\n    return request.patch(HTTP_API + '?id=' + self.props.topic).send({alias: alias}).promise()\n  }\n\n  self.changeLocation = function (location) {\n    if (!location) return Promise.reject(new Error('Location required --> netbeast(<id>).changeLocation(<location>)'))\n    if (!self.props.topic) return Promise.reject(new Error('Id required --> netbeast(<id>).changeLocation(<location>)'))\n\n    return request.patch(HTTP_API + '?id=' + self.props.topic).send({location: location}).promise()\n  }\n\n  self.create = function (args) {\n    if (!self.props.topic && !args.topic) return Promise.reject(new Error('Topic required'))\n    if (!args.hook) return Promise.reject(new Error('Hook required'))\n    if (!args.app) return Promise.reject(new Error('App name required'))\n\n    return request.post(HTTP_API).send(queryCustom(args)).promise()\n  }\n\n  //  Create a Scene with the given sates of the devices\n  self.createCustomScene = function (states) {\n    return Promise.map(states, function (device, done) {\n      //  Registra dispositivo en la escena\n      device.sceneid = self.props.topic\n      device.state = JSON.stringify(device.status)\n      for (var key in device) {\n        if (['id', 'sceneid', 'state'].indexOf(key) < 0) delete device[key]\n      }\n      return request.post(HTTP_SCENES).send(device).promise()\n    })\n  }\n\n  // Create a Scene with the current sates of the devices\n  self.createScene = function (devicesid) {\n    return Promise.map(devicesid, function (id) {\n      self.addDeviceScene(id)\n    })\n  }\n\n  //  Method that performs the delete request\n  self.delete = function (args) {\n    const queryString = queryCustom(normalizeArguments(args))\n    return request.del(HTTP_API).query(queryString).promise()\n  }\n\n  //  Method that performs the delete request for a specific device\n  self.deleteById = function (id) {\n    return request.del(HTTP_API).query({ id: id }).promise()\n  }\n\n  //  Method that performs the delete request for a specific device\n  self.deleteByAlias = function (alias) {\n    return request.del(HTTP_API).query({ alias: alias }).promise()\n  }\n\n  //  Delete a device from a Scene\n  self.deleteDeviceScene = function (deviceid) {\n    return request.del(HTTP_SCENES).query({sceneid: self.props.topic, id: deviceid}).promise()\n  }\n\n  //  Delete a Scene\n  self.deleteScene = function () {\n    return request.del(HTTP_SCENES).query({sceneid: self.props.topic}).promise()\n  }\n\n  //  Method that performs the get request\n  self.get = function (args) {\n    if (self.props.topic === undefined) return Promise.reject(new Error('Topic required'))\n    return request.get(HTTP_API + '/topic/' + self.props.topic).query(self.props).promise()\n  }\n\n  //  Obtain all the Scene´s name already declared\n  self.getAllScenes = function () {\n    return request.get(HTTP_SCENES).promise()\n  }\n\n  //  Method that performs the get request for a specific device\n  self.getById = function (id) {\n    return request.get(HTTP_API + '/id/' + id).promise()\n  }\n\n  //  Method that performs the get request for a specific device\n  self.getByAlias = function (alias) {\n    return request.get(HTTP_API + '/alias/' + alias).promise()\n  }\n\n  //  Obtain all the details of a given Scene\n  self.getScene = function () {\n    return request.get(HTTP_SCENES).query(queryCustomScene()).promise()\n  }\n\n  //  Specified if the resource belongs to a certain group\n  self.groupBy = function (group) {\n    self.props.group = group\n    return self\n  }\n\n  self.groupDevices = function (name, devices) {\n    return Promise.map(devices, function (item) {\n      request.patch(HTTP_API).query({id: item}).send({groupname: name}).promise()\n    })\n  }\n\n  self.publish = function (message) {\n    var client = mqtt.connect('ws://' + process.env.NETBEAST)\n\n    client.on('connect', function () {\n      client.publish('netbeast/' + self.props.topic, JSON.stringify({message}))\n    })\n  }\n\n  //  Method that performs the set request\n  self.set = function (args) {\n    return request.post(HTTP_API + '/topic/' + self.props.topic).query(queryCustom()).send(args).promise()\n  }\n\n  //  Method that performs the set request  for a specific device\n  self.setById = function (id, args) {\n    return request.post(HTTP_API + '/id/' + id).send(args).promise()\n  }\n\n  //  Method that performs the set request  for a specific device\n  self.setByAlias = function (alias, args) {\n    return request.post(HTTP_API + '/alias/' + alias).send(args).promise()\n  }\n\n  //  Specified the location of the objects\n  self.topic = function (topic) {\n    self.props.topic = topic\n    return self\n  }\n\n  self.updateDB = function (args) {\n    if (!self.props.topic && !args.topic) return Promise.reject(new Error('Topic required'))\n    if (!args.hook) return Promise.reject(new Error('Hook required'))\n    if (!args.app) return Promise.reject(new Error('App name required'))\n\n    console.log(HTTP_API + '/update')\n    return request.post(HTTP_API + '/update').send(queryCustom(args)).promise()\n  }\n\n  function queryCustom (args) {\n    var queryString = args || {}\n    if (self.props.topic) queryString.topic = self.props.topic\n    if (self.props.alias) queryString.alias = self.props.alias\n    if (self.props.location) queryString.location = self.props.location\n    if (self.props.group) queryString.groupname = self.props.group\n    return queryString\n  }\n\n  function queryCustomScene (args) {\n    var queryString = args || {}\n    if (self.props.location) queryString.location = self.props.location\n    if (self.props.topic) queryString.sceneid = self.props.topic\n    return queryString\n  }\n\n  function normalizeArguments (args) {\n    //  Prepare query to be an object out of args unless it is undefined\n    var query = typeof args === 'undefined' ? undefined : {}\n    // if it is an string turn it into an array\n    args = typeof args === 'string' ? [args] : args\n    // and normalize it into an object again\n    if (args instanceof Array) {\n      args.forEach(function (param) { query[param] = '' })\n    } else if (typeof args === 'object') {\n      query = args\n    }\n\n    return query\n  }\n\n  return self\n}\n\nnetbeast.scan = function () {\n  return new Promise(function (resolve, reject) {\n    scan(function (beast) {\n      if (beast && beast[0]) {\n        netbeast.set(beast[0]) // set environment variable\n        return resolve(beast)\n      }\n\n      return reject(new Error('No netbeasts found in subnet'))\n    })\n  })\n}\n\nnetbeast.find = function () {\n  if (process.env.NETBEAST) return Promise.resolve(process.env.NETBEAST)\n  return netbeast.scan()\n}\n\nnetbeast.set = function (networkObject) {\n  process.env.NETBEAST = networkObject.address + ':' + networkObject.port\n  return netbeast\n}\n\nnetbeast.emit = function (msg) {\n  // Log notification through console\n  var str = chalk.bgCyan('ws') +\n  chalk.bold.bgCyan(msg.title || '::')\n\n  switch (msg.emphasis) {\n    case 'error':\n    str = str + chalk.bgRed(msg.body)\n    break\n    case 'warning':\n    str = str + chalk.bgYellow(msg.body)\n    break\n    case 'info':\n    str = str + chalk.bgBlue(msg.body)\n    break\n    case 'success':\n    str = str + chalk.bgGreen(msg.body)\n    break\n  }\n\n  var client = mqtt.connect('ws://' + process.env.NETBEAST)\n  console.log(str)\n  client.publish('netbeast/push', JSON.stringify(msg))\n  client.end()\n}\n\nnetbeast.error = function (body, title) {\n  netbeast.emit({ emphasis: 'error', body: body, title: title })\n}\n\nnetbeast.info = function (body, title) {\n  netbeast.emit({ emphasis: 'info', body: body, title: title })\n}\n\nnetbeast.success = function (body, title) {\n  netbeast.emit({ emphasis: 'success', body: body, title: title })\n}\n\nnetbeast.warning = function (body, title) {\n  netbeast.emit({ emphasis: 'warning', body: body, title: title })\n}\n\nnetbeast.on = function (topic, callback) {\n  var client = mqtt.connect('ws://' + process.env.NETBEAST)\n\n  client.on('connect', function () {\n    console.log('connected')\n    client.subscribe('netbeast/' + topic)\n  })\n\n  if (!topic) return Promise.reject(new Error('Topic required'))\n\n  client.on('message', function (topic, message) {\n    console.log(message)\n    if (message) {\n      message = JSON.parse(message.toString())\n      callback(null, message)\n    }\n  })\n}\n\n// Search for devices of a given brand (or all)\nnetbeast.discoverDevices = function (app) {\n  var apps = []\n  var promise = new Promise(function (resolve, reject) {\n    request.get(process.env.NETBEAST + '/plugins')\n    .then(function (res) {\n      for (var aplication in res.body) {\n        if (apps.indexOf(res.body[aplication].name) < 0) apps.push(res.body[aplication].name)\n      }\n\n      if (!app || app === 'all') {\n        return Promise.each(apps, function (item) {\n          request.get(APP_PROXY + item + '/discover').promise()\n        })\n      } else if (apps.indexOf(app) >= 0) {\n        return request.get(APP_PROXY + app + '/discover')\n      } else {\n        return reject(new Error('App not supported yet'))\n      }\n    })\n  })\n  return promise\n}\n\nmodule.exports = netbeast\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/lib/scan.js":"var dgram = require('dgram')\n\nvar freeport = require('freeport')\nvar Spinner = require('cli-spinner').Spinner\n\nmodule.exports = function (done) {\n  var result = []\n  var client = dgram.createSocket('udp4')\n  const MCAST_IP = '239.0.16.18'\n  const MCAST_PORT = 16180\n  freeport(function (err, port) {\n    if (err) throw err\n    client.bind(port, '0.0.0.0')\n  })\n  client.on('listening', function () {\n    var msg = new Buffer('hi')\n    var spinner = new Spinner('Looking for netbeasts... %s')\n    spinner.setSpinnerString('|/-\\\\')\n    spinner.start()\n    // Poll N times for Netbeast router's in subnet\n    // =====================================\n    const N = 3\n    for (var i = 0; i < N; i++) {\n      setTimeout(function () {\n        client.send(msg, 0, msg.length, MCAST_PORT, MCAST_IP, function (err, bytes) {\n          if (err) throw err\n        })\n      }, i * 1000)\n    }\n    // Close client after N attempts\n    setTimeout(function () {\n      client.close()\n      spinner.stop()\n      if (result.length === 0) {\n        console.log('No Netbeast routers found in subnet.')\n      }\n      console.log('\\nDone.\\n')\n      if (typeof done === 'function') return done(result)\n    }, N * 1000)\n  })\n  client.on('message', function (msg, req) {\n    var beast = { address: req.address, port: msg.toString() }\n    if (_notListed(result, beast)) {\n      if (result.length === 0) {\n        console.log('\\n# Netbeast at reach')\n        console.log('=====================')\n      }\n      beast.port = JSON.parse(beast.port)\n      console.log('* Netbeast alive at %s:%s', beast.address, beast.port)\n      result.push(beast)\n    }\n  })\n}\nfunction _notListed (arr, obj) {\n  var notListed = true\n  arr.forEach(function (item) {\n    if (item.address === obj.address) {\n      notListed = false\n    }\n  })\n  return notListed\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/lib/init.js":"// Similar to url helper\n// this is a hack around, let's see if it works better:\n\nmodule.exports = function () {\n  if (typeof window !== 'undefined' && window.document) {\n    // this code runs in a browser:\n    var arr = window.location.href.split('/')\n    return arr[2]\n\n  } else if (process.env.NETBEAST) {\n    return process.env.NETBEAST\n\n  } else {\n    console.error('Netbeast router URL is missing or device cannot be found')\n    process.exit(-1)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/samples/discovery.js":"netbeast = require('..')\nnetbeast.find().then(function (networkObjects) {\n  console.log('network objects available with the following fields')\n  console.log(networkObjects)\n\n  /* Select a second netbeast */\n  if (networkObjects[1])  {\n    netbeast.set(networkObjects[1])\n  }\n\n  console.log('Discovering devices within the network')\n  netbeast.discoverDevices('all').then(function (devices ) {\n    console.log(devices)\n  })\n\n}).catch(function (err) {\n  console.error(err)\n})","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/samples/lights-off.js":"var netbeast = require('..')\n\nnetbeast.find().then(function () {\n   netbeast('lights').set({power: 0})\n})\n\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/samples/loop.js":"var netbeast = require('..')\n\n\nnetbeast.find().then(function () {\n  var color = 0\n  setInterval(function () {\n    color += 2000\n    var colorHue = Math.floor(color % 360)\n    netbeast('lights').set({power: 1, brightness: 100, hue: colorHue, saturation: 100})\n  }, 1000)\n})\n\n","/home/travis/build/npmtest/node-npmtest-netbeast/node_modules/netbeast/testeando.js":"process.env.NETBEAST = 'localhost:8000'\nvar netbeast = require('./index')\n\nnetbeast.on('temperature', function(err, data) {\n  console.log(err)\n  console.log(data)\n})\n\nsetInterval(function () {\n  netbeast('temperature').publish({temperature: 19})\n}, 2000)\n"}